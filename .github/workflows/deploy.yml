name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the action to perform'
        required: true
        default: 'deploy'
        options:
          - deploy
          - destroy

jobs:
  deploy_or_destroy:
    runs-on: ubuntu-latest

    env:
      TF_VAR_aws_region: "eu-west-1"
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      DYNAMODB_TABLE_NAME: ${{ secrets.DYNAMODB_TABLE_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Check if S3 bucket exists
        run: |
            if aws s3api head-bucket --bucket ${{ env.S3_BUCKET_NAME }} 2>/dev/null; then
              echo "S3 bucket already exists."
              echo "S3_BUCKET_EXISTS=true" >> $GITHUB_ENV
            else
              echo "S3 bucket does not exist."
              echo "S3_BUCKET_EXISTS=false" >> $GITHUB_ENV
            fi


      - name: Create S3 Bucket if not exists
        if: ${{ env.S3_BUCKET_EXISTS == 'false' }}
        run: |
            echo "Creating S3 bucket..."
            aws s3api create-bucket --bucket ${{ env.S3_BUCKET_NAME }} --region ${{ env.TF_VAR_aws_region }} --create-bucket-configuration LocationConstraint=${{ env.TF_VAR_aws_region }} || {
              if aws s3api head-bucket --bucket ${{ env.S3_BUCKET_NAME }} 2>/dev/null; then
                echo "Bucket already exists"
              else
                echo "Failed to create S3 bucket"
                exit 1
              fi
            }
            echo "S3 bucket created successfully."


      - name: Check if DynamoDB table exists
        run: |
            if aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} --region ${{ env.TF_VAR_aws_region }} 2>/dev/null; then
              echo "DynamoDB table already exists."
              echo "DYNAMODB_TABLE_EXISTS=true" >> $GITHUB_ENV
            else
              echo "DynamoDB table does not exist."
              echo "DYNAMODB_TABLE_EXISTS=false" >> $GITHUB_ENV
            fi

      - name: Create DynamoDB Table if not exists
        if: ${{ env.DYNAMODB_TABLE_EXISTS == 'false' }}
        run: |
            echo "Creating DynamoDB table..."
            aws dynamodb create-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ env.TF_VAR_aws_region }} || {
              ERROR_CODE=$?
              if [ $ERROR_CODE -eq 400 ] && aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} 2>/dev/null; then
                echo "Table already exists"
              else
                echo "Failed to create DynamoDB table with error code $ERROR_CODE"
                exit 1
              fi
            }
            echo "DynamoDB table created successfully."

      - name: Setup .NET
        if: ${{ github.event.inputs.action == 'deploy' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies and build
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
            echo "Restoring dependencies and building the project..."
            dotnet publish AWSLambdaProject.csproj -c Release -o ./publish
            if [ -d "./publish" ]; then
                echo "Project build complete and output directory exists."
            else
                echo "Build failed or output directory not found."
                exit 1
            fi
        working-directory: .

      - name: Zip artifacts
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
            echo "Zipping artifacts..."
            if [ -d "./publish" ]; then
              cd ./publish
              zip -r lambda-deployment-package.zip .
              echo "Artifacts zipped and ready for deployment."
            else
              echo "Publish directory not found."
              exit 1
            fi
        working-directory: .

      - name: Deploy Lambda using Terraform
        if: ${{ github.event.inputs.action == 'deploy' }}
        run: |
          echo "Deploying Lambda using Terraform..."
          cd ./terraform
          terraform init
          terraform apply -auto-approve
          echo "Terraform deployment complete."

      - name: Destroy Lambda using Terraform
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          echo "Destroying Lambda using Terraform..."
          cd ./terraform
          terraform init
          terraform destroy -auto-approve
          echo "Terraform destruction complete."

      - name: Delete S3 Bucket and DynamoDB Table
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          echo "Deleting S3 bucket and DynamoDB table for Terraform backend..."
          aws s3 rb s3://${{ env.S3_BUCKET_NAME }} --force
          aws dynamodb delete-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} --region ${{ env.TF_VAR_aws_region }}
          echo "S3 bucket and DynamoDB table deleted."
